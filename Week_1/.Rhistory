##combine y_test and y_train to get complete row of activity labels
y_train <- (read.table("/Users/samuelcolon/Coursera/UCI HAR Dataset/train//y_train.txt", header=FALSE))
y_test <- (read.table("/Users/samuelcolon/Coursera/UCI HAR Dataset/test//y_test.txt", header=FALSE))
y_full <- rbind(y_test, y_train)
###Figure out better way to change names??
##
y_full <- sub("6", "LAYING", y_full[,1])
y_full <- sub("4", "SITTING", y_full)
y_full <- sub("5", "STANDING", y_full)
y_full <- sub("3", "WALKING_DOWNSTAIRS", y_full)
y_full <- sub("2", "WALKING_UPSTAIRS", y_full)
y_full <- sub("1", "WALKING", y_full)
##Add y_full to huge2
full_data <- cbind(y_full,full_data)
#change column name to activity
colnames(full_data)[1] <- "activity"
##Make a single object for the subjects, and bind to data frame, name first column
test_subjects <- (read.table("/Users/samuelcolon/Coursera/UCI HAR Dataset/test//subject_test.txt", header=FALSE))
training_subjects <- (read.table("/Users/samuelcolon/Coursera/UCI HAR Dataset/train//subject_train.txt", header=FALSE))
subjects <- rbind(test_subjects, training_subjects)
full_data <- cbind(subjects, full_data)
colnames(full_data)[1] <- "subject"
View(full_data)
grouped <- group_by(full_data, subject, activity)
library(dplyr)
full_data <- group_by(full_data, subject, activity)
View(full_data)
summary <- summarise_each(full_data, fun(means))
summary <- summarise_each(full_data, funs(means))
summary <- summarise_each(full_data, funs(mean))
View(summary)
select(full_data, subject==1)
select(full_data, subject=="1")
select(full_data, subject="1")
select(full_data, subject)
?select
select(subject, matches("1"))
select(full_data,subject = 1)
select(full_data,subject == 1)
select(full_data,subject = 1)
?filter
filter(full_data, subject == 1)
filter(full_data, subject == 1, activity== LAYING)
filter(full_data, subject == 1, activity== "LAYING")
mean(filter(full_data, subject == 1, activity== "LAYING"))
filter(full_data, subject == 1, activity== "LAYING")
filter(full_data, subject == 1, activity== "LAYING"[1])
filter(full_data, subject == 1, activity== "LAYING"[,3])
filter(full_data, subject == 1, activity== "LAYING"[3])
filter(full_data, subject == 1, activity== "LAYING")[3]
mean(filter(full_data, subject == 1, activity== "LAYING")[3])
mean(filter(full_data, subject == 1, activity== "LAYING")([3]))
mean(filter(full_data, subject == 1, activity== "LAYING")([3])
test<- filter(full_data, subject == 1, activity== "LAYING")[3]
head(test)
mean(test)
mean(test, na.rm=TRUE)
mean(test[-1])
mean[1,1]
test[1,1]
mean(test[,1])
test[,1]
mean(test[,2:10])
test[,1]
mean(test[2:5,1])
test<- filter(full_data, subject == 1, activity== "LAYING")[,3]
test
mean(test)
filter(full_data, subject == 1, activity== "LAYING")
filter(full_data, subject == 1, activity== "LAYING")[4]
filter(full_data, subject == 1, activity== "LAYING")[[4]]
mean(filter(full_data, subject == 1, activity== "LAYING")[[3]])
View(test)
View(full_data)
full_data <- summarise_each(full_data, funs(mean))
View(full_data)
View(std_cols)
install.packages("scales")
#chapter 7, Graphics
install.packages("ggplot2")
require(ggplot2)
data(diamonds)
head(diamonds)
hist(diamonds$carat, main= "Carat Histogram", xlab = "Carat")
#scatterplot
plot(price ~ carat, data = diamonds)
#boxplot
boxplot(diamonds$carat)
##Using ggplot2
ggplot(data = diamonds) + geom_histogram(aes(x = carat))
ggplot(data = diamonds) + geom_density(aes(x = carat), fill = "grey50")
ggplot(diamonds, aes(x= carat, y = price)) + geom_point()
#basic without layers saved to g
g <- ggplot(diamonds, aes(x = carat, y = price))
g + geom_point()
g + geom_point(aes(color = color))
g + geom_point(aes(color = color)) + facet_wrap(~color)
g + geom_point(aes(color = color)) + facet_grid(cut ~ clarity)
#violin
ggplot(diamonds, aes(y = carat, x = cut)) + geom_violin()
#using lubridate package, pg 95
install.packages("lubridate")
require(lubridate)
##create year and month variables
economics$year <- year(economics$date)
economics$month <- month(economics$date, label = TRUE)
econ2000 <- economics[which(economics$year >= 2000),]
##load the scales package for better axis formatting
require(scales)
#build foundation of plot
g <- ggplot(econ2000, aes(x=month, y=pop))
##add lines color coded and grouped by year
#group aesthetic breaks data into separate groups
g <- g + geom_line(aes(color=factor(year), group=year))
#name legend year
g <- g + scale_color_discrete(name="Year")
#format y axis
g <- g + scale_y_continuous(labels=comma)
# add a title and axis labels
g <- g + labs(title = "Population Growth", x="Month", y="Population")
#plot the graph
g
install.packages("ggthemes")
g2 <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aex(color=color))
g2 <- ggplot(diamonds, aes(x=carat, y=price)) + geom_point(aes(color=color))
g2
g2 + theme_economist() + scale_colour_economist()
require(ggthemes)
g2 + theme_economist() + scale_colour_economist()
g2 + theme_tufte
g2 +theme_excel() + scale_colour_excel()
##Exercises in Chapter 8
say.hello <- function() {
print("Hell, World!")
}
say.hello
##Exercises in Chapter 8
say.hello <- function() {
print("Hello, World!")
}
say.hello()
sprintf("Hello %s", "Jared")
sprintf("Hello %s", "Jared Lander")
sprintf("Hello %s", "Jared.Sam")
sprintf("Hello %s, today is %s", "Jared", "Moonday")
hello.person <- function(name) {
print(sprintf("Hello %s", name))
}
hello.person()
hello.person("Sam")
hello.person <- function(first, last) {
print(sprintf("Hello %s", first, last))
}
hello.person("Lander", "Jared")
hello.person <- function(first, last) {
print(sprintf("Hello %s %s", first, last))
}
hello.person("Lander", "Jared")
hello.person(last="awesome", first="super")
hello.person(last="awesome", "super")
hello.person(first="super", "notawesome")
hello.person(last="superawesome")
hello.person(last="superawesome", "it's true")
hello.person(fir="awesome", l="not so much")
hello.person <- function(first, last="Donut"){
print(sprintf("Hello %s %s", first, last))
}
Hello.person("Jelly")
hello.person("Jelly")
hello.person("chocolate")
hello.person("Rhubarb")
hello.person <- function(first, last = "Doe", ...){
print(sprintf("Hello %s %s", first, last))
}
hello.person("Jack", "and Jill", "went up the hill", "to fetch a pail")
hello.person("Jack", extra= "dope")
hello.person("Jack", "not doe", extra= "dope")
double.num <- function(x){
x * 2
}
double.num(50)
double.num <- function(x){
return(x * 2)
}
double.num(50)
#with explicit return, and extra arg added
double.num <- function(x){
return(x * 2)
#not executed, because function exits after return statement
print("Hello!")
return(17)
}
double.num(15)
run.this <- function(x, func=mean){
do.call(func, args = list(x))
}
run.this(1:10)
run.this(1:20, sum)
run.this(1:10, median)
run.this(1:10, max)
check.bool <- function(x){
if (x==1){
print("hello")
} else {
print("goodbye")
}
}
check.bool(3)
check.bool(1)
##Chapter 9 Exercises, pg 105
check.bool <- function(x){
if (x==1){
print("hello")
} else
{
print("goodbye")
}
}
check.bool(1)
check.bool(1)
check.bool(3)
check.bool(FALSE)
check.bool(TRUE)
check.bool <- function(x){
if(x==1){
print("hello")
} else if (x=0){
print("goodbye")
} else {
print("shite")
}
}
check.bool <- function(x){
if(x==1){
print("hello")
} else if (x==0){
print("goodbye")
} else {
print("shite")
}
}
check.bool(0)
check.bool(39)
check.bool(1)
use.switch <- function(x){
switch(x,
"a"="first",
"b"="second",
"z"="last",
"c"="third",
"other")
}
use.switch("a")
use.switch("4")
use.switch("3")
use.switch(4)
use.switch(3)
use.switch(20)
ifelse(1==1, "Yes", "No")
ifelse(1 < 1, "Yes", "No")
toTest <- c(1,1,0,1,0,1)
ifelse(toTest == 1, "Yes", "No")
ifelse(toTest==1, toTest * 3, "Zero")
ifelse(toTest == 1, "Yes", "No")
toTest[2] <- NA
ifelse(toTest == 1, "Yes", "No")
a <- c(1,1,0,1)
b <- c(2,1,0,1)
ifelse(a==1 & b==1, "Yes", "No")
ifelse(a==1 & b==1, "Yes", "No")
ifelse(a==1 && b == 1, "Yes", "No")
for(i in 1:10){
print(i)
}
fruit <- c("apple", "banana", "pomegranate")
fruitLength <- rep(NA, length(fruit))
fruitLength
names(fruitLength) <- fruit
fruitLength
for (a in fruit) {
fruitLength[a] <- nchar(a)
}
fruitLength
fruitLength2 <- nchar(fruit)
fruitLength2
names(fruitLength2)
names(fruitLength2) <- fruit
fruitLength2
x <- 1
while (x<=5){
print(x)
x <- x + 1
}
for(i in 1:10){
if(i==3){
next
} print(i)
}
for(i in 1:10){
if(i==3){
next
}
print(i)
}
for(i in 1:10){
if (i==4){
break
}
print(i)
}
theMatrix <- matrix(1:9, nrow = 3)
#sum the rows
apply(theMatrix, 1, sum)
theMatrix
apply(theMatrix, 2, sum)
rowSum(theMatrix)
rowSums(theMatrix)
theMatrix[2, 1] <- NA
theMatrix
apply(theMatrix, 1, sum)
apply(theMatrix, 1, sum, na.rm=TRUE)
##lapply and sapply--pg 118 ->
theList <- list(A = matrix(1:9,3) B= 1:5, C = matrix(1:4,2), D = 2)
theList <- list(A = matrix(1:9,3), B= 1:5, C = matrix(1:4,2), D = 2)
theList
lapply(theList, sum)
aggregate(price ~ cut, diamonds, each(mean, median))
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
require(plyr)
aggregate(price ~ cut, diamonds, each(mean, median))
require(data.table)
theDF <- data.frame(A=1:10, B=letters[1:10], C=LETTERS[11:20], D=
rep(c("One", "Two", "Three"), length.out=10))
theDF
#data.table
theDT <- data.table(A=1:10, B=letters[1:10], C=LETTERS[11:20],
D=rep(c("One", "Two", "Three"), length.out=10))
theDT
class(theDF$B)
class(theDT$B)
diamondsDT <- data.table(diamonds)
diamondsDT
theDT[theDT$A <=7]
theDT[theDT$A <=7,]
theDT[, list(A,C)]
theDT[,B]
theDT[,list(B)] #prints as list
theDT[, "B", with = FALSE]
theDT[, c("A", "C"), with=FALSE]
tables()
setkey(theDT, D)
theDT
key(theDT)
talbes()
tables()
theDT["One,"]
theDT["One",]
theDT[c("One", "Two"),]
setkey(theDT, D)
setkey(diamondsDT, cut color)
setkey(diamondsDT, cut, color)
diamondsDT
diamondsDT[J("Ideal", "E"), ]
diamondsDT[J("Ideal", c("E", "D")), ]
aggregate(price ~ cut, diamonds, mean)
diamondsDT[, mean(price), by = cut]
diamondsDT[, list(price=mean(price)), by=cut]
diamondsDT[, mean(price), by = list(cut, color)]
diamondsDT[, list(price = mean(price), carat = mean(carat)), by = cut]
diamondsDT[, list(price = mean(price), carat = mean(carat), caratSum = sum(carat)), by=cut]
diamondsDT[, list(price = mean(price), carat = mean(carat)),
by = list(cut, color)]
sport <- c("Hockey", "Baseball", "Football")
league <- c("NHL", "MLB", "NFL")
trophy <- c("Stanley Cup", "Commisioner's Trophy", "Vince Lombardi Trophy")
trophies1 <- cbind(sport, league, trophy)
trophies 1
trophies1
trophies2 <- data.frame(sport=c("Basketball", "Golf"),
league = c("NBA", "PGA"),
trophy = c("Larry O'Brien Championship Trophy",
"Wanamaker Trophy"),
stringsAsFactors=FALSE)
trophies2
trophies <- rbind(trophies1, trophies2)
trophies
cbind(Sport = sport, Association = league, Prize = trophy)
trophies
download.file(url = "http://jaredlander.com/data/US_Foreign_Aid.zip",
destfile = "./Chapter_12/Foreign_Aid.zip")
download.file(url = "http://jaredlander.com/data/US_Foreign_Aid.zip",
destfile = "/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid.zip")
unzip("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid.zip")
require(stringr)
theFiles <- dir("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid.zip",
pattern = "\\.csv")
theFiles
theFiles <- dir("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid",)
theFiles <- dir("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid",)
theFiles <- dir("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid",
pattern = "\\.csv")
theFiles
for(a in theFiles){
#build good name to assign to data
nameToUse <- str_sub(string = a, start = 12, end = 18)
##read in the csv using read.table
##file.path a conveninet way to specify a folder and file name
temp <- read.table(file = file.path("Foreign_Aid", a),
header=TRUE, sep=",", stringsAsFactors=FALSE)
##assign them into workspace
assign(x=namesToUse, value=temp)
}
for(a in theFiles){
#build good name to assign to data
nameToUse <- str_sub(string = a, start = 12, end = 18)
##read in the csv using read.table
##file.path a conveninet way to specify a folder and file name
temp <- read.table(file = file.path("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid", a),
header=TRUE, sep=",", stringsAsFactors=FALSE)
##assign them into workspace
assign(x=namesToUse, value=temp)
}
for(a in theFiles){
#build good name to assign to data
nameToUse <- str_sub(string = a, start = 12, end = 18)
##read in the csv using read.table
##file.path a conveninet way to specify a folder and file name
temp <- read.table(file = file.path("/Users//samuelcolon/R4Every1/Chapter_12/Foreign_Aid", a),
header=TRUE, sep=",", stringsAsFactors=FALSE)
##assign them into workspace
assign(x=nameToUse, value=temp)
}
View(temp)
str_sub
?str_sub
hw <- "Hadley Wickham"
str_sub(hw, 1, 6)
str_sub(hw, end=6)
str_sub(hw, 8, 14)
Aids90s00s <- merge(x=Aid_90s, y=Aid_00s,
by.x=c("Country.Name", "Program.Name"),
by.y=c("Country.Name", "Program.Name")
##Page 143, merge function, merges two data.frames
Aid90s00s <- merge(x=Aid_90s, y=Aid_00s,
by.x=c("Country.Name", "Program.Name"),
by.y=c("Country.Name", "Program.Name"))
?merge
require(base)
Aid90s00s <- merge(x=Aid_90s, y=Aid_00s,
by.x=c("Country.Name", "Program.Name"),
by.y=c("Country.Name", "Program.Name"))
View(Aid90s00s)
head(Aid90s00s)
Aid90s00s <- merge(x=Aid_90s, y=Aid_00s,
by.x=c("Country.Name", "Program.Name"),
by.y=c("Country.Name", "Program.Name"))
require(pollution)
pollution
head("pollution")
getwd()
setwd("/Users//samuelcolon//Coursera//Exploratory_Data_Analysis//Week_1")
getwd()
pollution <- read.csv("data/avgpm25.csv", colClasses = c("numeric", "character",
"factor", "numeric", "numeric"))
head(pollution)
View(pollution)
boxplot(pollution$pm25, col = "blue")
hist(pollution$pm25, col = "green")
hist(pollution$pm25, col = "green")
rug(pollution$pm25)
hist(pollution$pm25, col = "green", breaks = 100)
hist(pollution$pm25, col = "green", breaks = 1000)
hist(pollution$pm25, col = "green", breaks = 2)
boxplot(pollution$pm25, col = "blue")
abline(h=12)
hist(pollution$pm25, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(pollution$pm25), col = "magenta", lwd = 4)
barplot(table(pollution$region), col = "wheat", main = "Number of
Counties in Each Region")
###TWO DIMENSIONS
boxplot(pm25 ~ region, data = pollution, col = "red")
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
par(mfrow = c(2,1), mar = c(4,4,2,1))
hist(subset(pollution, region == "east")$pm25, col = "green")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(polution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(polution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
with(pollution, plot(latitude, pm25, col = region))
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5,4,2,1))
with(subset(pollution, region =="west"), plot(latitude, pm25, main = "West"))
with(subset(pollution, region == "east"), plot(latitude, pm25, main = "East"))
library(datasets)
data(cars)
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
state
library(ggplot2)
data(mpg)
qplot(disp, hwy, data = mpg)
data(mpg)
qplot(displ, hwy, data = mpg)
